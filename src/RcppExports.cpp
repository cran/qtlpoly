// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// seqCpp
arma::vec seqCpp(const int& a, const int& b);
RcppExport SEXP _qtlpoly_seqCpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const int& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(seqCpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mat_to_vecCpp
arma::vec mat_to_vecCpp(const arma::mat& x, const arma::mat& x2);
RcppExport SEXP _qtlpoly_mat_to_vecCpp(SEXP xSEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(mat_to_vecCpp(x, x2));
    return rcpp_result_gen;
END_RCPP
}
// vec_to_cubeCpp
arma::cube vec_to_cubeCpp(const arma::vec& x, const Rcpp::List& g);
RcppExport SEXP _qtlpoly_vec_to_cubeCpp(SEXP xSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_to_cubeCpp(x, g));
    return rcpp_result_gen;
END_RCPP
}
// varCols
arma::vec varCols(const arma::mat& x);
RcppExport SEXP _qtlpoly_varCols(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(varCols(x));
    return rcpp_result_gen;
END_RCPP
}
// scaleCpp
arma::mat scaleCpp(const arma::mat& x);
RcppExport SEXP _qtlpoly_scaleCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// isIdentity_mat
bool isIdentity_mat(const arma::mat x);
RcppExport SEXP _qtlpoly_isIdentity_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isIdentity_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// isIdentity_spmat
bool isIdentity_spmat(const arma::sp_mat x);
RcppExport SEXP _qtlpoly_isIdentity_spmat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isIdentity_spmat(x));
    return rcpp_result_gen;
END_RCPP
}
// isDiagonal_mat
bool isDiagonal_mat(const arma::mat x);
RcppExport SEXP _qtlpoly_isDiagonal_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isDiagonal_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// isDiagonal_spmat
bool isDiagonal_spmat(const arma::sp_mat x);
RcppExport SEXP _qtlpoly_isDiagonal_spmat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isDiagonal_spmat(x));
    return rcpp_result_gen;
END_RCPP
}
// MNR
Rcpp::List MNR(const arma::mat& Y, const Rcpp::List& X, const Rcpp::List& Gx, const Rcpp::List& Z, const Rcpp::List& K, const Rcpp::List& R, const Rcpp::List& Ge, const Rcpp::List& GeI, const arma::vec& ws, int iters, double tolpar, double tolparinv, const bool& ai, const bool& pev, const bool& verbose, const bool& retscaled, const arma::vec& stepweight, const arma::vec& emupdate);
RcppExport SEXP _qtlpoly_MNR(SEXP YSEXP, SEXP XSEXP, SEXP GxSEXP, SEXP ZSEXP, SEXP KSEXP, SEXP RSEXP, SEXP GeSEXP, SEXP GeISEXP, SEXP wsSEXP, SEXP itersSEXP, SEXP tolparSEXP, SEXP tolparinvSEXP, SEXP aiSEXP, SEXP pevSEXP, SEXP verboseSEXP, SEXP retscaledSEXP, SEXP stepweightSEXP, SEXP emupdateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Gx(GxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Ge(GeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type GeI(GeISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type tolpar(tolparSEXP);
    Rcpp::traits::input_parameter< double >::type tolparinv(tolparinvSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type pev(pevSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type retscaled(retscaledSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type stepweight(stepweightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type emupdate(emupdateSEXP);
    rcpp_result_gen = Rcpp::wrap(MNR(Y, X, Gx, Z, K, R, Ge, GeI, ws, iters, tolpar, tolparinv, ai, pev, verbose, retscaled, stepweight, emupdate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qtlpoly_seqCpp", (DL_FUNC) &_qtlpoly_seqCpp, 2},
    {"_qtlpoly_mat_to_vecCpp", (DL_FUNC) &_qtlpoly_mat_to_vecCpp, 2},
    {"_qtlpoly_vec_to_cubeCpp", (DL_FUNC) &_qtlpoly_vec_to_cubeCpp, 2},
    {"_qtlpoly_varCols", (DL_FUNC) &_qtlpoly_varCols, 1},
    {"_qtlpoly_scaleCpp", (DL_FUNC) &_qtlpoly_scaleCpp, 1},
    {"_qtlpoly_isIdentity_mat", (DL_FUNC) &_qtlpoly_isIdentity_mat, 1},
    {"_qtlpoly_isIdentity_spmat", (DL_FUNC) &_qtlpoly_isIdentity_spmat, 1},
    {"_qtlpoly_isDiagonal_mat", (DL_FUNC) &_qtlpoly_isDiagonal_mat, 1},
    {"_qtlpoly_isDiagonal_spmat", (DL_FUNC) &_qtlpoly_isDiagonal_spmat, 1},
    {"_qtlpoly_MNR", (DL_FUNC) &_qtlpoly_MNR, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_qtlpoly(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
